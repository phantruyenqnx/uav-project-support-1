#include "C:\\Users\\Admin\\AppData\\Local\\Arduino15\\packages\\STMicroelectronics\\hardware\\stm32\\2.3.0\\cores\\arduino\\wiring_digital.c"
#include <STM32FreeRTOS.h>
#include "src/LevelSensor/SensLevel.hpp"
#include <Servo.h>


HardwareSerial P_SerScale(USART6);
#define P_SERSCALE_PINDIR     PB8
#define P_SERSCALE_BAUDRATE   115200
#define P_SERSCALE_SLAVEID    10  // ID SCALE MODULE
#define P_SERSCALE_FRAME_LENGTH   8
#define P_SERSCALE_PERIOD_GET_VALUE 10 // (ms)

HardwareSerial P_SerCommon(USART1);
#define P_SERSCOMMON_PINDIR     PA8
#define P_SERSCOMMON_BAUDRATE   115200
#define P_SERSCOMMON_SLAVEID    17  // ID SCALE MODULE
#define P_SERSCOMMON_FRAME_LENGTH   12

#define P_LEVELSENSOR_BAUDRATE 2000000
UARTSensLevelClass P_LevelSensor(P_LEVELSENSOR_BAUDRATE);

#define P_HOPPER_MIN_VALUE      750
#define P_HOPPER_MAX_VALUE      2250
#define P_HOPPER_MIDDLE_VALUE   1500
#define P_HOPPER_MIN_PERCENT    0
#define P_HOPPER_MAX_PERCENT    100
#define P_HOPPER_PIN            PB7
Servo P_Hopper;

#define P_SPINNER_MIN_VALUE      1000
#define P_SPINNER_MAX_VALUE      2000
#define P_SPINNER_MIDDLE_VALUE   1500
#define P_SPINNER_MIN_RPM        0
#define P_SPINNER_MAX_RPM        1350
#define P_SPINNER_PIN            PA6
#define P_SPINNER_TIME_ACCEL     10
#define P_SPINNER_ACCEL          10
Servo P_Spinner;

/****************************  CONFIG  ****************************/
// config main

// common define
/*
Project have 7 tasks:                Piority                 Stacksize
1. Modbus Module Common UART1             3                       100  
2. Modbus Scale RS485 UART6               3                       100          
3. Uart Level sensor UART2                3                       100
4. Control hopper                         3                       100
5. Control spinner                        3                       100
6. Calib spread system                    1                       100
7. Led status                             2                       50
*/
#define COMMON_STACKSIZE                            100
#define SCALE_STACKSIZE                             100
#define LEDSTATUS_STACKSIZE                         50
#define LEVELSENSOR_STACKSIZE                       100
#define HOPPER_STACKSIZE                            100
#define SPINNER_STACKSIZE                           100
#define CALIBATESYSTEM_STACKSIZE                    100

#define STEP1                       1
#define STEP2                       2
#define STEP3                       3
#define STEP4                       4
#define STEP5                       5
#define STEP6                       6
#define STEP7                       7
#define STEP8                       8
#define STEP9                       9
#define STEP0                       0

#define PRIO1                       1 // chỉ số càng thấp ưu tiên càng thấp
#define PRIO2                       2
#define PRIO3                       3
#define PRIO4                       4
#define PRIO5                       5
#define PRIO6                       6
#define PRIO7                       7
#define PRIO8                       8
#define PRIO9                       9
#define PRIO0                       0

#define INIT_BOOT_STRING            "Drone Spread Module v1.0 \n"

struct system
{
    uint8_t task;
    double value;
	uint8_t levelSensor_setStatus ;
};

enum SCALE_MODBUS_FUNCTION
{
    SCALE_MODBUS_FUNCTION_INIT,
    SCALE_MODBUS_FUNCTION_CHECK_CONNECT, // check connect
    SCALE_MODBUS_FUNCTION_STATUS_TASK,// get status task and value task
    SCALE_MODBUS_FUNCTION_SET_TASK,
    SCALE_MODBUS_TOTAL_FUNCTION,
};

enum MODBUS_FUNCTION
{
    MODBUS_FUNCTION_INIT,
    MODBUS_FUNCTION_CHECK_CONNECT, // check connect
    MODBUS_FUNCTION_STATUS_TASK,// get status task and value task
    MODBUS_TOTAL_FUNCTION,
};

typedef struct 
{
    volatile uint8_t id;
    volatile uint8_t func;
    volatile uint8_t data1;
    volatile uint8_t data2; 
    volatile uint8_t data3;
    volatile uint8_t data4;
    volatile uint8_t crcH;
    volatile uint8_t crcL; 
}frame_t;

frame_t frame_Checkconnect;
frame_t frame_StatusTask;
frame_t frame_SetTask;
frame_t frame_Receive;

volatile bool scale_checkConnect = false;
volatile uint8_t scale_task_curr = 0;
volatile double scale_value_curr = 0.0;
volatile uint8_t scale_value_curr_byte1 = 0;
volatile uint8_t scale_value_curr_byte2 = 0;
volatile uint8_t scale_value_curr_byte3 = 0;
volatile uint8_t scale_setTask = STEP4;
volatile uint8_t scale_setValue = 0;

// level sensor
volatile uint8_t levelSensor_getStatus = 0;
volatile uint8_t levelSensor_setStatus = 0;
enum LEVELSENSOR_STATUS
{
    LEVELSENSOR_STATUS_INIT,
    LEVELSENSOR_STATUS_NO_CONNECT,
    LEVELSENSOR_STATUS_HAVE_VOLUME,
    LEVELSENSOR_STATUS_NO_VOLUME,
    LEVELSENSOR_STATUS_SET_NO_VOLUME,
    LEVELSENSOR_STATUS_SET_HAVE_VOLUME,
    LEVELSENSOR_STATUS_TOTAL,
};

// hopper actuator
volatile uint8_t hopper_setStatus = 0;
volatile uint8_t hopper_getStatus = 0;

// spinner actuator
volatile uint16_t spinner_setStatus = 0;
volatile uint16_t spinner_getStatus = 0;


// modbus frame12
typedef struct 
{
    volatile uint8_t id;
    volatile uint8_t func;
    volatile uint8_t data1;
    volatile uint8_t data2; 
    volatile uint8_t data3;
    volatile uint8_t data4;
    volatile uint8_t data5;
    volatile uint8_t data6; 
    volatile uint8_t data7;
    volatile uint8_t data8;
    volatile uint8_t crcH;
    volatile uint8_t crcL; 
}frame12_t;

frame12_t frame12_Checkconnect;
frame12_t frame12_StatusTask;
frame12_t frame12_SetTask;
frame12_t frame12_Receive;

volatile uint8_t _last_setTask = 0;
/* Table of CRC values for high�order byte */
const uint8_t _auchCRCHi[] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
	0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
	0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
	0x40};

/* Table of CRC values for low�order byte */
const uint8_t _auchCRCLo[] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
	0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
	0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
	0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
	0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
	0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
	0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
	0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
	0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
	0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
	0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
	0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
	0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
	0x40};
