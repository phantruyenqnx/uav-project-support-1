// ------------------- communicateModuleCommon ------------------- //   
unsigned int _comMC_slave_update(HardwareSerial *ModbusPort)
{
    if ((*ModbusPort).available())
    {
        unsigned char buffer = 0;
        unsigned char overflow = 0;
        while ((*ModbusPort).available())
        {
            if (overflow) 
                (*ModbusPort).read();
            else
            {
                if (buffer == BUFFER_SIZE)
                    overflow = 1;
                _comMC.frame[buffer] = (*ModbusPort).read();
                buffer++;
            }
            delayMicroseconds(_comMC.T1_5); // inter character time out
        }
        if (overflow)
            return _comMC.errorCount++;        

        if (buffer > 7)
        {
            if (_comMC.frame[0] == SLAVE_ID)
            {
                unsigned int crc = ((_comMC.frame[buffer - 2] << 8) | _comMC.frame[buffer - 1]); // combine the crc Low & High bytes
                if (calculateCRC(_comMC.frame, 6) == crc)
                {
                    switch (_comMC.frame[1])
                    {
                    // case /* constant-expression */:
                    //     /* code */
                    //     break;
                    
                    default:
                         _comMC.errorCount++;
                        break;
                    }
                }
                else
                {
                    _comMC.errorCount++;
                }
            }
        }
        else if (buffer > 0 && buffer < 8) _comMC.errorCount++;
    }
    return _comMC.errorCount;
}

void _comMC_sendFrame(uint8_t frame[], HardwareSerial *ModbusPort)
{
    digitalWrite(Pincontrol485,HIGH);

	for (unsigned char i = 0; i < 8; i++)
    {
        (*ModbusPort).write(frame[i]);
        (*ModbusPort).flush();
    }
	delayMicroseconds(_comMC.frameDelay);
    digitalWrite(Pincontrol485,LOW);
}

static uint16_t calculateCRC( const unsigned char *buf, unsigned int len )
{
	static const uint16_t table[16] = {
	0x0000, 0xcc01, 0xd801, 0x1400, 0xf001, 0x3c00, 0x2800, 0xe401,
	0xa001, 0x6c00, 0x7800, 0xb401, 0x5000, 0x9c01, 0x8801, 0x4400 };

	uint16_t crc = 0xFFFF;

	while(len--)
	{
		crc	= table[((*buf) ^ crc) & 0xF];
		crc ^= (crc >> 4);

		crc	= table[(((*buf++) >> 4) ^ crc) & 0xF];
		crc ^= (crc >> 4);
	}

	return crc;
}
