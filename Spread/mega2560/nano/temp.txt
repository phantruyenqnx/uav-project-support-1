#include <curveFitting.h>
#include "HX711-multi.h" 
#include <SimpleKalmanFilter.h>
#include <EEPROM.h>

SimpleKalmanFilter kalmanFilter(2, 2, 0.001);

#define CLK                         13 // clock pin to the load cell amp 
#define DOUT1                       A0 // data pin to the first lca 
#define DOUT2                       A1 // data pin to the second lca 
#define DOUT3                       A2 // data pin to the third lca 
#define DOUT4                       A3 // data pin to the fourth lca 


#define BOOT_MESSAGE                "CALIBRATING OFFSET ....." 
#define TARE_TIMEOUT_SECONDS        5

// define delegate class HX711-multi 
byte DOUTS[4] = {DOUT1, DOUT2, DOUT3, DOUT4}; 
#define CHANNEL_COUNT               sizeof(DOUTS)/sizeof(byte) 
long int  results[CHANNEL_COUNT];
HX711MULTI scales(CHANNEL_COUNT, DOUTS, CLK);

// define variable use in main code
#define TIMES_CAL                   200 
#define DEBUG_SERIAL                true

long  int offset[4];
unsigned long combine = 0;
byte split[4];
double first_ket_qua = 0.00;
double last_ket_qua = 411.78;
double he_so_1_A = 0.00;
double he_so_2_A = 0.00;
double scaleValue;
int set = 0;
int check = 0;
double temp_max = 10.18;
double counter_1;
int num_first = 0;
int num_last = 0;
int count= 0;
double sum_last;
double sum_exact[TIMES_CAL];
double last_offset;


void setup() 
{ 
    Serial.begin(9600); 
    Serial.println(BOOT_MESSAGE); 
    Serial.flush(); 
    pinMode(11,OUTPUT); 
    scales.set_gain(64);
    /// offet get eeprom ;
    // write eeprom : EEPROM.write(200, byte1) // add cua offsets[0] 200 - 203
    // EEPROM.write(201, byte2) 
    // EEPROM.write(202, byte3)
    // EEPROM.write(203, byte4)
    /// byte1 = (uint8_t)offsets && 0xFF000000 >> 24
    /// byte2 >> 16
    /// byte >> 8
    /// byte4 
    // byte1 << 24 
    split[0] = offset[4]>>24;
    split[1] = offset[4]>>16;
    split[2] = offset[4]>>8;
    split[3] = offset[4];
    EEPROM.write(200,split[0]);
    EEPROM.write(201,split[1]); 
    EEPROM.write(202,split[2]);
    EEPROM.write(203,split[3]);
    EEPROM.read(200);
    EEPROM.read(201);
    EEPROM.read(202);
    EEPROM.read(203);
    combine = (split[0]<<24)|(split[1]<<16)|(split[2]<<8|(split[3]));
    tare();
    scales.setDebugEnable(true);
    Serial.println("HE THONG SAN SANG");
    scales.is_ready();

}

void he_so()
{
    double y_fixed[3] = {0,10.18};
    double x_measured[3] = {first_ket_qua,last_ket_qua};
    double coef[2];
    int sss = fitCurve(1, 3, x_measured, y_fixed, 2, coef);
    if (sss == 0)
    {
        for (int i = 0; i < 2; i++)
        {
            if (i==0)
            {
                he_so_1_A = coef[i];

            }
            if (i==1)
            {
                he_so_2_A = coef[i];

            }
        }
        
    }
    eeprom_1A();
    eeprom_2A();
}

void eeprom_1A()
{
    //double he_so = 0.01;
    long temp = 0;
    //double combine = 0.00;
    byte split[4];
    temp = he_so_1_A*100000;
    split[0] = temp>>24;
    split[1] = temp>>16;
    split[2] = temp>>8;
    split[3] = temp;
    EEPROM.write(196,split[0]);
    EEPROM.write(197,split[1]); 
    EEPROM.write(198,split[2]);
    EEPROM.write(199,split[3]);
    EEPROM.read(196);
    EEPROM.read(197);
    EEPROM.read(198);
    EEPROM.read(199);
    he_so_1_A = (split[0]<<24)|(split[1]<<16)|(split[2]<<8|(split[3]));
    he_so_1_A = he_so_1_A/100000;
    //combine = combine/1000;
}

void eeprom_2A()
{
    //double he_so = 0.01;
    long temp = 0;
    //double combine = 0.00;
    byte split[4];
    temp = he_so_2_A*100000;
    split[0] = temp>>24;
    split[1] = temp>>16;
    split[2] = temp>>8;
    split[3] = temp;
    EEPROM.write(192,split[0]);
    EEPROM.write(193,split[1]); 
    EEPROM.write(194,split[2]);
    EEPROM.write(195,split[3]);
    EEPROM.read(192);
    EEPROM.read(193);
    EEPROM.read(194);
    EEPROM.read(195);
    he_so_2_A = (split[0]<<24)|(split[1]<<16)|(split[2]<<8|(split[3]));
    he_so_2_A = he_so_2_A/100000;
    //combine = combine/1000;
}

void tare() 
{ 
    bool tareSuccessful = false; 
    unsigned long tareStartTime = millis(); 
    while (!tareSuccessful && millis()<(tareStartTime+TARE_TIMEOUT_SECONDS*1000)) 
    { tareSuccessful = scales.tare(100,5000);} 
}

void sendRaw_data_1()
{ 
    scales.readCustom(results); 
    double sum_exact[TIMES_CAL] = {0.0}; 
    double sum_last = 0.00;
    for (int j = 0; j < TIMES_CAL ; j++)
    {
        for (int i=0; i<scales.get_count(); ++i) 
        {
            double _temp = kalmanFilter.updateEstimate(results[i]);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            sum_exact[j] += (double)(abs(_temp)) / 1000.0;         
        }
        sum_last += sum_exact[j] / TIMES_CAL ; 
    }

        first_ket_qua = sum_last;
        he_so();   
} 

void sendRaw_data_3()
{ 
scales.readCustom(results,offset); 
    double sum_exact[TIMES_CAL] = {0.0}; 
    double sum_last = 0.00;
    for (int j = 0; j < TIMES_CAL ; j++)
    {
        for (int i=0; i<scales.get_count(); ++i) 
        {
            double _temp = kalmanFilter.updateEstimate(results[i]);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            sum_exact[j] += (double)(abs(_temp)) / 1000.0;       
        }
        sum_last += sum_exact[j] / TIMES_CAL ; 
    }
        last_ket_qua = sum_last;
        he_so();
    } 

void sendRaw_data_4()
{ 
scales.read(results); 
    double sum_exact[TIMES_CAL] = {0.0}; 
    double sum_last = 0.00;
    for (int j = 0; j < TIMES_CAL ; j++)
    {
        for (int i=0; i<scales.get_count(); ++i) 
        {
            double _temp = kalmanFilter.updateEstimate(results[i]);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            sum_exact[j] += (double)(abs(_temp)) / 1000.0;       
        }
        sum_last += sum_exact[j] / TIMES_CAL ;
    }
        counter_1 = scaleValue;
        scaleValue = sum_last *  he_so_1_A + he_so_2_A - last_offset; 
} 

void sendRaw_data_2()
{ 
    scales.readCustom(results,offset); 
    double sum_exact[TIMES_CAL] = {0.0}; 
    double sum_last = 0.00;
    for (int j = 0; j < TIMES_CAL ; j++)
    {
        for (int i=0; i<scales.get_count(); ++i) 
        {
            double _temp = kalmanFilter.updateEstimate(results[i]);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            _temp = kalmanFilter.updateEstimate(_temp);
            sum_exact[j] += (double)(abs(_temp)) / 1000.0;
        }
        sum_last += sum_exact[j] / TIMES_CAL ; 
    }
        Serial.print("scaleValue 1 : ");
        last_offset = sum_last*he_so_1_A + he_so_2_A; // luu eerpom
    }

void serialEvent(){
    if ((Serial.available() > 0) && (set == 0))          // ham ngat su kien
    {
        set = Serial.read();                            // doc id
    }
}
 
void Find_max()
{
    if(check == 1 && scaleValue > 0.50)
{
    temp_max = scaleValue;
    check = 0;
}
    if(scaleValue; scaleValue>temp_max)
{
    scaleValue = temp_max;
}
}


void Find_min()
{
double a;
double temp_min = scaleValue;
double temp_min_first;
double temp_min_last;
sendRaw_data_4();
if (scaleValue; scaleValue<temp_min)
{
    temp_min_first = abs(scaleValue);
    sendRaw_data_4();
    sendRaw_data_4();
    temp_min_last = abs(scaleValue);
if (temp_min_last < temp_min_first)
{
sendRaw_data_4();
temp_min_last = scaleValue;  
check = 1;
}
if (temp_min_last>=temp_min_first)
{
temp_min_last = scaleValue;
check = 0;
}
}
}

void receive()
{
    switch (set)
    {
    case '1': // lay offset
    sendRaw_data_1();
    Serial.println();
    set = 0;
    break;
    case '2':   // calib binh rong
    sendRaw_data_2();
    Serial.println();
    set = 0;
    break;
    case '3':   // calib 20 kg
    sendRaw_data_3();
    Serial.println();
    set = 0;
    break;
    /*case '4':   // Lenh bay
    double minpoint = 0.00;
    Serial.print ("He So 1: ");
    Serial.println(he_so_1_A);
    Serial.print ("He So 2: ");
    Serial.println(he_so_2_A);
    sendRaw_data_4();
    Find_min();
    Find_max();

    Serial.print ("Ket qua: ");
    Serial.println (scaleValue,3);
    Serial.println();
    if (scaleValue < 0.003)
    {
    he_so();
    }
    set = 4;
    break;*/
    default:
        break;
    }
}

void loop() 
{   
double minpoint = 0.00;
receive();
sendRaw_data_4();
Find_min();
Find_max();
Serial.print ("Ket qua: ");
Serial.println (scaleValue,3);
Serial.println();
if (scaleValue < 0.003)
{
    he_so();
}
set = 0;
}
